/* eslint-disable react/jsx-key */
/* eslint-disable react-hooks/exhaustive-deps */
/* eslint-disable @next/next/no-img-element */
import Head from "next/head";
import { Fragment } from "react";
import { useEffect, useState } from "react";
import { Disclosure, Menu, Transition } from "@headlessui/react";
import { MenuIcon, XIcon } from "@heroicons/react/outline";
import { AvatarGenerator } from "random-avatar-generator";
import { sdk, createAnonymousSession } from "../utils/web-init";
import { Query } from "appwrite";
import { generateUsername } from "unique-username-generator";

const navigation = [
  { name: "Document", href: "#", current: true },
  { name: "Projects", href: "#", current: false },
  { name: "Share", href: "#", current: false },
];

function classNames(...classes) {
  return classes.filter(Boolean).join(" ");
}

export default function Home() {
  const [userData, setUserData] = useState({
    username: "",
    avatar: "",
  });
  const [viewers, setViewers] = useState([]);
  const [authenticated, setAuthenticated] = useState(false);

  const addViewer = () => {
    console.log("Adding user");
    sdk.database.createDocument("62979465de755d0182fc", userData.username, {
      username: userData.username,
      avatar: userData.avatar,
      document_id: "test-document",
    });
  };

  const fetchViewers = () => {
    let promise = sdk.database.listDocuments(
      "62979465de755d0182fc"
      //  [
      //   Query.equal("document_id", "test-document"),
      // ]
    );

    promise.then(
      function ({ documents }) {
        setViewers(
          documents.map((e) => ({
            username: e.username,
            avatar: e.avatar,
          }))
        );
      },
      function (error) {
        console.log("Error", error); // Failure
      }
    );
  };

  useEffect(() => {
    if (!userData.username || !userData.avatar) {
      let _user_data = localStorage.getItem("user-data"),
        user_data;
      if (!_user_data) {
        user_data = {
          username: generateUsername(),
          avatar: new AvatarGenerator().generateRandomAvatar(),
        };
      } else {
        user_data = {
          username: JSON.parse(_user_data).username,
          avatar: JSON.parse(_user_data).avatar,
        };
      }
      localStorage.setItem("user-data", JSON.stringify(user_data));
      setUserData(user_data);
    } else {
      addViewer();
    }
  }, [userData]);

  useEffect(() => {
    fetchViewers();
    // Subscribe to collection channel
    const _subscribe = sdk.subscribe(
      "collections.62979465de755d0182fc.documents",
      (response) => {
        const { payload, events } = response;
        if (payload.username === userData.username) return;
        if (events.includes("collections.*.documents.*.delete")) {
          const _viewers = viewers.filter(
            (e) => e.username !== payload.username
          );
          setViewers(_viewers);
        }
        if (events.includes("collections.*.documents.*.create")) {
          const _viewers = [
            ...viewers,
            {
              username: payload.username,
              avatar: payload.avatar,
            },
          ];
          setViewers(_viewers);
        }
      }
    );
    return () => {
      _subscribe();
    };
  }, []);

  useEffect(() => {
    const cleanup = async () => {
      console.log("executed!");
      let promise = sdk.database.deleteDocument(
        "62979465de755d0182fc",
        userData.username
      );
      promise.then(
        function (response) {
          console.log(response); // Success
          console.log("executed!");
        },
        function (error) {
          console.log(error); // Failure
        }
      );
    };

    window.addEventListener("beforeunload", cleanup);
    return () => {
      window.removeEventListener("beforeunload", cleanup);
    };
  }, [authenticated]);

  useEffect(() => {
    createAnonymousSession().then(() => {
      setAuthenticated(true);
    });
  }, []);

  return (
    <>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <Disclosure as="nav" className="bg-gray-800">
        {({ open }) => (
          <>
            <div className="max-w-7xl mx-auto px-2 sm:px-6 lg:px-8">
              <div className="relative flex items-center justify-between h-16">
                <div className="absolute inset-y-0 left-0 flex items-center sm:hidden">
                  {/* Mobile menu button*/}
                  <Disclosure.Button className="inline-flex items-center justify-center p-2 rounded-md text-gray-400 hover:text-white hover:bg-gray-700 focus:outline-none focus:ring-2 focus:ring-inset focus:ring-white">
                    <span className="sr-only">Open main menu</span>
                    {open ? (
                      <XIcon className="block h-6 w-6" aria-hidden="true" />
                    ) : (
                      <MenuIcon className="block h-6 w-6" aria-hidden="true" />
                    )}
                  </Disclosure.Button>
                </div>
                <div className="flex-1 flex items-center justify-center sm:items-stretch sm:justify-start">
                  <div className="hidden sm:block sm:ml-6">
                    <div className="flex space-x-4">
                      {navigation.map((item) => (
                        <a
                          key={item.name}
                          href={item.href}
                          className={classNames(
                            item.current
                              ? "bg-gray-900 text-white"
                              : "text-gray-300 hover:bg-gray-700 hover:text-white",
                            "px-3 py-2 rounded-md text-sm font-medium"
                          )}
                          aria-current={item.current ? "page" : undefined}
                        >
                          {item.name}
                        </a>
                      ))}
                    </div>
                  </div>
                </div>
                <div className="absolute inset-y-0 right-0 flex items-center pr-2 sm:static sm:inset-auto sm:ml-6 sm:pr-0">
                  {viewers.length > 0
                    ? viewers.map((user) => (
                        <img
                          className="h-8 w-8 rounded-full"
                          src={user.avatar}
                          alt=""
                        />
                      ))
                    : null}

                  {/* Profile dropdown */}
                  <Menu as="div" className="ml-3 relative">
                    <div>
                      <Menu.Button className="bg-gray-800 flex text-sm rounded-full focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-offset-gray-800 focus:ring-white">
                        <span className="sr-only">Open user menu</span>
                        <img
                          className="h-8 w-8 rounded-full"
                          src={userData.avatar}
                          alt=""
                        />
                      </Menu.Button>
                    </div>
                    <Transition
                      as={Fragment}
                      enter="transition ease-out duration-100"
                      enterFrom="transform opacity-0 scale-95"
                      enterTo="transform opacity-100 scale-100"
                      leave="transition ease-in duration-75"
                      leaveFrom="transform opacity-100 scale-100"
                      leaveTo="transform opacity-0 scale-95"
                    >
                      <Menu.Items className="origin-top-right absolute right-0 mt-2 w-48 rounded-md shadow-lg py-1 bg-white ring-1 ring-black ring-opacity-5 focus:outline-none">
                        <Menu.Item>
                          {({ active }) => (
                            <a
                              href="#"
                              className={classNames(
                                active ? "bg-gray-100" : "",
                                "block px-4 py-2 text-sm text-gray-700"
                              )}
                            >
                              Your Profile
                            </a>
                          )}
                        </Menu.Item>
                        <Menu.Item>
                          {({ active }) => (
                            <a
                              href="#"
                              className={classNames(
                                active ? "bg-gray-100" : "",
                                "block px-4 py-2 text-sm text-gray-700"
                              )}
                            >
                              Settings
                            </a>
                          )}
                        </Menu.Item>
                        <Menu.Item>
                          {({ active }) => (
                            <a
                              href="#"
                              className={classNames(
                                active ? "bg-gray-100" : "",
                                "block px-4 py-2 text-sm text-gray-700"
                              )}
                            >
                              Sign out
                            </a>
                          )}
                        </Menu.Item>
                      </Menu.Items>
                    </Transition>
                  </Menu>
                </div>
              </div>
            </div>

            <Disclosure.Panel className="sm:hidden">
              <div className="px-2 pt-2 pb-3 space-y-1">
                {navigation.map((item) => (
                  <Disclosure.Button
                    key={item.name}
                    as="a"
                    href={item.href}
                    className={classNames(
                      item.current
                        ? "bg-gray-900 text-white"
                        : "text-gray-300 hover:bg-gray-700 hover:text-white",
                      "block px-3 py-2 rounded-md text-base font-medium"
                    )}
                    aria-current={item.current ? "page" : undefined}
                  >
                    {item.name}
                  </Disclosure.Button>
                ))}
              </div>
            </Disclosure.Panel>
          </>
        )}
      </Disclosure>
    </>
  );
}
